openapi: 3.0.1
info:
  title: aasf-website-backend
  description: Backend for AASF Website
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: Users
    description: Operations related to users
  - name: Events
    description: Operations related to events
  - name: Admin
    description: Operations related to admin
  - name: Specification
    description: The swagger API specification

paths:
  /users/login:
    post:
      tags:
        - Users
      servers:
        - url: /
      description: Log a user in
      requestBody:
        description: Roll number and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        200:
          description: Return token and success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Could not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/password:
    put:
      tags:
        - Users
      servers:
        - url: /
      description: Change user's password
      security:
        - Bearer: []
      requestBody:
        description: Current Password and New Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: User not found
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
          description: Invalid Password
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
        description: Token missing
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
        description: Invalid Token
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'

            
  /users/dp:
    put:
      tags:
        - Users
      servers:
        - url: /
      description: Change Profile Picture
      security:
        - Bearer: []
      requestBody:
        description: Roll Number and dp
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfilePictureBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        400:
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Invalid Profile Picture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
        description: Token missing
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
        description: Invalid Token
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'

  /users/fcmToken:
    put:
      tags:
        - Users
      servers:
        - url: /
      description: Change user's FCM Token
      security:
        - Bearer: []
      requestBody:
        description: FCM Token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeFCMBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /users/details:
    get:
      tags:
        - Users
      servers:
        - url: /
      description: Get details of a user
      security:
        - Bearer: []
      responses:
        200:
        description: Return details of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        400:
        description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
         401:
        description: Token missing
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
        description: Invalid Token
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        

  /users/leaderboard:
    get:
      tags:
        - Users
      servers:
        - url: /
      description: Get leaderboard
      security:
        - Bearer: []
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          required: true
          description: number of elements to skip
      responses:
        200:
          description: Return leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
         401:
        description: Token missing
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
        description: Invalid Token
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        

  /events:
    get:
      tags:
        - Events
      servers:
        - url: /
      description: Get events
      responses:
        200:
          description: Return events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'

  /events/attendance:
    post:
      tags:
        - Events
      servers:
        - url: /
      description: Mark attendance for a particular event
      security:
        - Bearer: []
      requestBody:
        description: The encrypted hash related to the event and roll number
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkAttendanceBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Already marked attendance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Invaid QR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
         401:
        description: Token missing
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'
        401:
        description: Invalid Token
          content:
             application/json:
              schema:
                 $ref: '#/components/schemas/Error'

  /admin/users/{roll}:
    put:
      tags:
        - Admin
      servers:
        - url: /
      description: Edit user details
      security:
        - Bearer: []
      parameters:
        - in: path
          name: roll
          schema:
            type: string
          required: true
          description: Roll number of the student
      requestBody:
        description: Updated details of the student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUserResponse'
        400:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/notifications:
    post:
      tags:
        - Admin
      servers:
        - url: /
      description: Send push notifications to users
      security:
        - Bearer: []
      requestBody:
        description: Notification Details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /admin/events:
    get:
      tags:
        - Admin
      servers:
        - url: /
      security:
        - Bearer: []
      description: Get events
      responses:
        200:
          description: Return events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Admin
      servers:
        - url: /
      description: Add an event
      security:
        - Bearer: []
      requestBody:
        description: Event details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEventBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/events/{id}:
    put:
      tags:
        - Admin
      servers:
        - url: /
      description: Edit event details
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: _id of the event
      requestBody:
        description: Updated details of the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEventBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
           description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Admin
      servers:
        - url: /
      description: Delete an event
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: _id of the event
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/events/qr/{id}/{day}:
    get:
      tags:
        - Admin
      servers:
        - url: /
      description: Get QR Code for the event for attendance
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: _id of the event
        - in: path
          name: day
          schema:
            type: number
          required: true
          description: Number of day of the event
      responses:
        200:
          description: Return QR Code and a success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QRResponse'
        400:
          description: Event not found or invalid Day number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/events/goodies:
    post:
      tags:
        - Admin
      servers:
        - url: /
      description: Add a goodie winner
      security:
        - Bearer: []
      requestBody:
        description: Goodie winner roll number and event ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGoodieBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/events/winners:
    post:
      tags:
        - Admin
      servers:
        - url: /
      description: Add contest winners
      security:
        - Bearer: []
      requestBody:
        description: 2D array of winners and event ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWinnersBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authorized to perform this action 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /spec:
    get:
      servers:
        - url: /
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Provide a valid JWT token

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
      additionalProperties: true

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    LoginBody:
      required:
        - roll
        - password
      type: object
      properties:
        roll:
          type: string
          example: 2018BCS-000
        password:
          type: string
          example: yourPassword

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: ey.......9X
        message:
          type: string
          example: Successfully Logged in!

    ChangePasswordBody:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          example: yourCurrentPassword
        newPassword:
          type: string
          example: yourNewPassword

    ChangeFCMBody:
      type: object
      required:
        - fcmToken
      properties:
        fcmToken:
          type: string
          example: longFCMTokenString

    UserDetailsResponse:
      type: object
      properties:
        message:
          type: string
          example: Details fetched successfully
        rank:
          type: number
          example: 1
        user:
          type: object
          properties:
            _id:
              type: string
              description: Roll number of the student
              example: 2020BCS-000
            name:
              type: string
              description: Name of the student
            dp:
              type: string
              description: The profile picture of the student(if exists)
            role:
              type: string
            score:
              type: object
              properties:
                technical:
                  type: number
                managerial:
                  type: number
                oratory:
                  type: number
            achievements:
              type: object
              properties:
                first:
                  type: array
                  items:
                    type: string
                second:
                  type: array
                  items:
                    type: string
                third:
                  type: array
                  items:
                    type: string

    LeaderboardResponse:
      type: object
      properties:
        message:
          type: string
          example: Leaderboard succesfully fetched
        totalScore:
          type: object
          description: Highest score possible in each category
          properties:
            technical:
              type: number
            managerial:
              type: number
            oratory:
              type: number
        leaderboard:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              totalScore:
                type: number

    EventsResponse:
      type: object
      properties:
        message:
          type: string
        events:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              startDate:
                type: string
              numberOfDays:
                type: string
              category:
                type: string
              attendance:
                type: array
                items:
                  type: number

    MarkAttendanceBody:
      type: object
      required:
        - hash
      properties:
        hash:
          type: string
          description: Encrypted hash related to the particular event

    EditUserBody:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        dp:
          type: string
        role:
          type: string
        score:
          type: object
          properties:
            technical:
              type: number
            managerial:
              type: number
            oratory:
              type: number
        achievements:
          type: object
          properties:
            first:
              type: array
              items:
                type: string
            second:
              type: array
              items:
                type: string
            third:
              type: array
              items:
                type: string

    EditUserResponse:
      type: object
      properties:
        message:
          type: string
        user:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            dp:
              type: string
            role:
              type: string
            score:
              type: object
              properties:
                technical:
                  type: number
                managerial:
                  type: number
                oratory:
                  type: number
            achievements:
              type: object
              properties:
                first:
                  type: array
                  items:
                    type: string
                second:
                  type: array
                  items:
                    type: string
                third:
                  type: array
                  items:
                    type: string

    NotificationBody:
      type: object
      required:
        - title
        - body
        - imageUrl
      properties:
        title:
          type: string
        body:
          type: string
        imageUrl:
          type: string

    AddEventBody:
      type: object
      required:
        - name
        - startDate
        - numberOfDays
        - category
        - importance
      properties:
        name:
          type: string
        startDate:
          type: string
          description: Format YYYY-MM-DD
        numberOfDays:
          type: number
        category:
          type: string
          enum: [technical, managerial, oratory, miscellaneous]
        importance:
          type: number

    EditEventBody:
      type: object
      properties:
        name:
          type: string
        startDate:
          type: string
          description: Format YYYY-MM-DD
        numberOfDays:
          type: number
        category:
          type: string
          enum: [technical, managerial, oratory, miscellaneous]
        importance:
          type: number

    QRResponse:
      type: object
      properties:
        message:
          type: string
        qr:
          type: string
          description: QR Code in base64 URL encoded form

    AddGoodieBody:
      type: object
      required:
        - roll
        - eventId
      properties:
        roll:
          type: string
        eventId:
          type: string

    AddWinnersBody:
      type: object
      required:
        - eventId
        - winners
      properties:
        eventId:
          type: string
        winners:
          type: array
          items:
            description: 2D Array of 1st, 2nd and 3rd, omit 3rd or 2nd if needed
            type: array
            items:
              type: string
              description: Roll number of the winner
              example: 2020IPG-000
          example: [[2018IPG-000, 2018IPG-001, 2018IPG-002], [2018IPG-003]]

    ProfilePictureBody:
      type: object
      required:
        - dp
      properties:
        dp:
          type: string
          description: Base64 encoded data URL of the image
